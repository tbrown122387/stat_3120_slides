alpha <- 2
beta <- 3
num_samples <- 1000
my_data <- rweibull(num_samples, shape=alpha, scale = beta)
#hist(my_data)
eval_ll <- function(pars){
my_alpha <- exp(pars[1])
my_beta <- exp(pars[2])
n <- num_samples
data_vector <- my_data
n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum(data_vector)/my_beta
}
initial_param_guess <- c(1,.5)
results <- optim(initial_param_guess, eval_ll)
mle_estimates <- exp(results$par)
mle_estimates
eval_ll <- function(pars){
my_alpha <- exp(pars[1])
my_beta <- exp(pars[2])
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum(data_vector)/my_beta
return(-1*like)
}
# step 2: use optim()
initial_param_guess <- c(1,.5)
results <- optim(initial_param_guess, eval_ll)
mle_estimates <- exp(results$par)
mle_estimates
results$par
?optim
results <- optim(initial_param_guess, eval_ll, method = "BFGS", gr = NULL)
mle_estimates <- exp(results$par)
mle_estimates
results <- optim(initial_param_guess, eval_ll, method = "BFGS", gr = NULL, hessian = T)
mle_estimates <- exp(results$par)
mle_estimates
results$par
hist(my_data)
eval_ll <- function(pars){
my_alpha <- exp(pars[1])
my_beta <- exp(pars[2])
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum(data_vector)/my_beta
return(-1*like)
}
log(2)
exp(1)
log(3)
initial_param_guess <- c(.5,1)
results <- optim(initial_param_guess, eval_ll, method = "BFGS", gr = NULL, hessian = T)
mle_estimates <- exp(results$par)
mle_estimates
eval_ll <- function(pars){
my_alpha <- exp(pars[1])
my_beta <- exp(pars[2])
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum((data_vector/my_beta)^(alpha))
return(-1*like)
}
# step 2: use optim()
initial_param_guess <- c(.5,1)
results <- optim(initial_param_guess, eval_ll, method = "BFGS", gr = NULL, hessian = T)
mle_estimates <- exp(results$par)
mle_estimates
results
eval_ll <- function(pars){
my_alpha <- exp(pars[1])
my_beta <- exp(pars[2])
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum((data_vector/my_beta)^(alpha))
#return(-1*like)
}
# step 2: use optim()
initial_param_guess <- c(.5,1)
results <- optim(initial_param_guess, eval_ll, method = "BFGS", gr = NULL, hessian = T)
mle_estimates <- exp(results$par)
mle_estimates
eval_ll <- function(pars){
my_alpha <- exp(pars[1])
my_beta <- exp(pars[2])
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum((data_vector/my_beta)^(alpha))
return(-1*like)
}
# step 2: use optim()
initial_param_guess <- c(.5,1)
eval_ll <- function(pars){
my_alpha <- exp(pars[1])
my_beta <- exp(pars[2])
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum((data_vector/my_beta)^(alpha))
return(-1*like)
}
# step 2: use optim()
initial_param_guess <- c(.5,1)
results <- optim(initial_param_guess, eval_ll, method = "BFGS", gr = NULL, hessian = T)
mle_estimates <- exp(results$par)
mle_estimates
results$par
my_data
hist(my_data)
install.packages("rgl")
library(rgl)
library(scatterplot3d)
?scatterplot3d
?expand.grid
alphasAndBetas <- expand.grid(alphas, betas)
alphas <- seq(0, 10, .1)
betas <- seq(0, 10, .1)
alphasAndBetas <- expand.grid(alphas, betas)
alphasAndBetas
apply(alphasAndBetas, 1, eval_ll)
likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alpha, betas, likes)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], likes)
eval_ll <- function(pars){
my_alpha <- pars[1]
my_beta <- pars[2]
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum((data_vector/my_beta)^(alpha))
return(-1*like)
}
initial_param_guess <- c(1,1)
results <- optim(initial_param_guess, eval_ll, method = "BFGS", gr = NULL, hessian = T)
warnings()
alphas <- seq(0, 10, .1)
betas <- seq(0, 10, .1)
alphasAndBetas <- expand.grid(alphas, betas)
likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], likes)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], likes)
alphas <- seq(0, 5, .1)
betas <- seq(0, 5, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], likes)
alphas <- seq(0, 5, .1)
betas <- seq(0, 5, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
num_samples
alpha <- 2
beta <- 3
num_samples <- 100
my_data <- rweibull(num_samples, shape=alpha, scale = beta)
#hist(my_data)
################################################
# now we find the maximum likelihood estimates #
################################################
# step 1: write a function
# that evaluates log-likelihood
eval_ll <- function(pars){
my_alpha <- pars[1]
my_beta <- pars[2]
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum((data_vector/my_beta)^(alpha))
return(-1*like)
}
# plot a surface
alphas <- seq(0, 5, .1)
betas <- seq(0, 5, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
alpha <- 2
beta <- 3
num_samples <- 20
my_data <- rweibull(num_samples, shape=alpha, scale = beta)
#hist(my_data)
################################################
# now we find the maximum likelihood estimates #
################################################
# step 1: write a function
# that evaluates log-likelihood
eval_ll <- function(pars){
my_alpha <- pars[1]
my_beta <- pars[2]
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum((data_vector/my_beta)^(alpha))
return(-1*like)
}
# plot a surface
alphas <- seq(0, 5, .1)
betas <- seq(0, 5, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
# step 2: use optim()
sum(log(my_data))
eval_ll <- function(pars){
my_alpha <- pars[1]
my_beta <- pars[2]
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum((data_vector/my_beta)^(my_alpha))
return(-1*like)
}
# plot a surface
alphas <- seq(0, 5, .1)
betas <- seq(0, 5, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
n
#fitting weibull
################################
# first generate from a known  #
# weibull disribution          #
################################
alpha <- 2
beta <- 3
num_samples <- 20
my_data <- rweibull(num_samples, shape=alpha, scale = beta)
#hist(my_data)
eval_ll <- function(pars){
my_alpha <- pars[1]
my_beta <- pars[2]
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum((data_vector/my_beta)^(my_alpha))
return(-1*like)
}
alphas <- seq(0, 5, .1)
betas <- seq(0, 5, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
hist(my_data)
eval_ll <- function(pars){
my_alpha <- pars[1]
my_beta <- pars[2]
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha) - n*my_alpha*log(my_beta) + (my_alpha-1)*(sum(log(data_vector))) - sum((data_vector/my_beta)^(my_alpha))
#return(-1*like)
}
# plot a surface
alphas <- seq(0, 5, .1)
betas <- seq(0, 5, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
log_likes
hist(log_likes)
my_data
my_data^2
alphas
alphas <- seq(0.1, 5, .1)
betas <- seq(0.1, 5, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
alphas <- seq(3, 5, .1)
betas <- seq(3, 5, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
alphas <- seq(1, 3, .1)
betas <- seq(4, 6, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
alphas <- seq(1, 3, .1)
betas <- seq(1, 10, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
eval_ll <- function(pars){
my_alpha <- pars[1]
my_beta <- pars[2]
n <- num_samples
data_vector <- my_data
like <- n*log(my_alpha)
- n*my_alpha*log(my_beta)
+ (my_alpha-1)*(sum(log(data_vector)))
- sum((data_vector/my_beta)^(my_alpha))
return(-1*like)
}
# plot a surface
alphas <- seq(1, 3, .1)
betas <- seq(1, 10, .1)
alphasAndBetas <- expand.grid(alphas, betas)
log_likes <- apply(alphasAndBetas, 1, eval_ll)
scatterplot3d(alphasAndBetas[,1], alphasAndBetas[,2], log_likes)
# step 2: use optim()
initial_param_guess <- c(1,1)
results <- optim(initial_param_guess, eval_ll, method = "BFGS", gr = NULL, hessian = T)
mle_estimates <- exp(results$par)
mle_estimates
