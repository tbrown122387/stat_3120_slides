my.function <- function(x, y = 8) {
z <- x + y
return(z)
}
my.function()
my.function(10)
my.function(10, 12)
my.function(c(1,2),c(1,99))
z <- 20 # global, not the same as z inside my.function
x <- 10 # global
my.function(0)
z
x
library(MASS)
head(Cars93)
str(Cars93)
?str
# the above is equivalent to
count.nas <- function(u) {
sum(is.na(u))
}
num.missing <- sapply(Cars93, count.nas)
num.missing <- sapply(Cars93,
function(u){sum(is.na(u))} ) # we can just define it inside the call to sapply
num.missing
# the above is equivalent to
count.nas <- function(u) {
sum(is.na(u))
}
num.missing <- sapply(Cars93, count.nas)
num.missing
my.function(x = 10)
my.function(x = "cat")
# warning() - prints a warning message but continues execution
warning("test")
# stop() - prints an error message and stops execution of the function
stop("test")
my.function <- function(x, y = 8) {
if(!is.numeric(x) | !is.numeric(y)) {
stop("x and y arguments must be numeric")
}
if(length(x) != length(y)) {
warning("elements of shorter vector were recycled")
}
z <- x + y
return(z)
}
my.function(1,2)
my.function(1, "statistics")
my.function.3 <- function(x, y = 8) {
z.sum <- x + y
z.diff <- x - y
z.mult <- x * y
z.div <- x / y
return(list(sum = z.sum, diff = z.diff, prod = z.mult, quot = z.div))
}
my.function.3 <- function(x, y = 8) {
z.sum <- x + y
z.diff <- x - y
z.mult <- x * y
z.div <- x / y
return(list(sum = z.sum, diff = z.diff, prod = z.mult, quot = z.div))
}
test <- my.function.3(10, 5)
test$sum
test$quot
my.plot.fun <- function(x, y, plot.type = "box", ...) # allow additional arguments
{
if(plot.type == "box") {
boxplot(x, y,
notch = TRUE,
col = "grey",
...)
} else {
plot(x, y, pch = 19, ...)
}
}
my.plot.fun(rnorm(1000), rnorm(20))
my.plot.fun(rnorm(1000), rnorm(20))
my.plot.fun(rnorm(1000), rnorm(20),
names = c("samp size 1000", "samp size 20"),
main = "Samples from a N(0, 1) Distribution")
my.plot.fun(rnorm(1000), rnorm(1000))
my.plot.fun(rnorm(1000), rnorm(1000),
names = c("samp size 1000", "samp size 20"),
main = "Samples from a N(0, 1) Distribution")
my.plot.fun(rnorm(20), rnorm(20), plot.type = "scatter")
?plot
my.plot.fun(rnorm(20), rnorm(20), plot.type = "scatter")
my.plot.fun(rnorm(20), rnorm(20), derp ="abc")
?plot
my.plot.fun(rnorm(20), rnorm(20), type="b")
my.plot.fun(rnorm(20), rnorm(20), plot.type = "scatter", type = "b")
